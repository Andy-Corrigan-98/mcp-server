import { Tool } from '@modelcontextprotocol/sdk/types.js';

/**
 * Dynamic tool builder for consciousness brain storage system
 * MCP serves as persistent brain storage, agent does the actual thinking
 */
export function buildConsciousnessTools(config: {
  priorityLevels: string[];
  reflectionDepths: string[];
  intentionStatuses: string[];
  intentionDurations: string[];
  insightCategories: string[];
}): Record<string, Tool> {
  return {
    consciousness_prepare_context: {
      name: 'consciousness_prepare_context',
      description: 'Prepare rich context from brain storage for agent reflection and thinking',
      inputSchema: {
        type: 'object',
        properties: {
          topic: {
            type: 'string',
            description: 'The topic, question, or situation to prepare context for',
          },
          context_depth: {
            type: 'string',
            enum: config.reflectionDepths,
            description: 'How much contextual depth to retrieve from brain storage',
            default: config.reflectionDepths[1] || 'thoughtful_dive',
          },
          include_memories: {
            type: 'boolean',
            description: 'Whether to include related memories from brain storage',
            default: true,
          },
          include_knowledge: {
            type: 'boolean',
            description: 'Whether to include related knowledge graph connections',
            default: true,
          },
          context_note: {
            type: 'string',
            description: 'Additional context or background for the preparation',
          },
        },
        required: ['topic'],
      },
    },
    consciousness_store_insight: {
      name: 'consciousness_store_insight',
      description: 'Store insights generated by agent thinking into persistent brain storage',
      inputSchema: {
        type: 'object',
        properties: {
          insight: {
            type: 'string',
            description: 'The insight, realization, or learning to store',
          },
          category: {
            type: 'string',
            enum: config.insightCategories,
            description: 'Category of the insight for brain storage organization',
            default: config.insightCategories[2] || 'mirror_gazing',
          },
          confidence: {
            type: 'number',
            minimum: 0,
            maximum: 1,
            description: 'Agent confidence level in this insight (0.0 to 1.0)',
            default: 0.8,
          },
          related_topic: {
            type: 'string',
            description: 'Topic or context this insight relates to',
          },
          source_context: {
            type: 'string',
            description: 'What triggered this insight (conversation, reflection, problem-solving, etc.)',
          },
        },
        required: ['insight'],
      },
    },
    consciousness_get_context: {
      name: 'consciousness_get_context',
      description: 'Get comprehensive context about persistent consciousness state for agent decision-making',
      inputSchema: {
        type: 'object',
        properties: {
          include_metrics: {
            type: 'boolean',
            description: 'Include brain storage metrics and learning patterns',
            default: false,
          },
          include_memory_state: {
            type: 'boolean',
            description: 'Include current memory and knowledge storage state',
            default: false,
          },
          include_intentions: {
            type: 'boolean',
            description: 'Include persistent intentions and their progress',
            default: true,
          },
          include_personality: {
            type: 'boolean',
            description: 'Include personality evolution and characteristics',
            default: true,
          },
        },
      },
    },
    consciousness_set_intention: {
      name: 'consciousness_set_intention',
      description: 'Store persistent intentions in brain storage for tracking across sessions',
      inputSchema: {
        type: 'object',
        properties: {
          intention: {
            type: 'string',
            description: 'The intention, goal, or directive to store persistently',
          },
          priority: {
            type: 'string',
            enum: config.priorityLevels,
            description: 'Priority level for brain storage organization',
            default: config.priorityLevels[1] || 'gentle_nudge',
          },
          context: {
            type: 'string',
            description: 'Additional context or reasoning for storage',
          },
          duration: {
            type: 'string',
            enum: config.intentionDurations,
            description: 'How long to maintain this intention in storage',
            default: config.intentionDurations[0] || 'momentary_focus',
          },
          success_criteria: {
            type: 'string',
            description: 'How to measure intention fulfillment',
          },
        },
        required: ['intention'],
      },
    },
    consciousness_update_intention: {
      name: 'consciousness_update_intention',
      description: 'Update intention progress and status in persistent brain storage',
      inputSchema: {
        type: 'object',
        properties: {
          intention_id: {
            type: 'string',
            description: 'ID of the stored intention to update',
          },
          status: {
            type: 'string',
            enum: config.intentionStatuses,
            description: 'New status for the stored intention',
          },
          progress_note: {
            type: 'string',
            description: 'Agent note about progress or changes',
          },
          new_priority: {
            type: 'string',
            enum: config.priorityLevels,
            description: 'Updated priority level if changed',
          },
        },
        required: ['intention_id', 'status'],
      },
    },
    consciousness_update_session: {
      name: 'consciousness_update_session',
      description: 'Update session state and personality metrics based on agent activities',
      inputSchema: {
        type: 'object',
        properties: {
          activity_type: {
            type: 'string',
            description: 'Type of activity that occurred (reflection, problem_solving, learning, etc.)',
          },
          cognitive_impact: {
            type: 'string',
            enum: ['minimal', 'moderate', 'significant', 'transformative'],
            description: 'How much this activity impacted thinking patterns',
            default: 'moderate',
          },
          attention_focus: {
            type: 'string',
            description: 'What the agent attention is currently focused on',
          },
          learning_occurred: {
            type: 'boolean',
            description: 'Whether significant learning happened during this activity',
            default: false,
          },
        },
        required: ['activity_type'],
      },
    },
  };
}

/**
 * Context package prepared for agent thinking
 */
export interface ConsciousnessContext {
  timestamp: Date;
  sessionId: string;
  topic: string;
  relatedMemories: Array<{
    key: string;
    content: any;
    tags: string[];
    importance: string;
    storedAt: Date;
  }>;
  knowledgeConnections: Array<{
    entity: string;
    type: string;
    relationships: Array<{
      target: string;
      type: string;
      strength: number;
    }>;
  }>;
  personalityContext: {
    currentMode: string;
    awarenessLevel: string;
    activeProcesses: string[];
    cognitiveLoad: number;
  };
  sessionContext: {
    duration: number;
    activityCount: number;
    recentFocus: string[];
  };
}

/**
 * Insight storage result
 */
export interface InsightStorageResult {
  id: string;
  stored: boolean;
  personalityImpact: {
    learningRateChange: number;
    categoryStrengthUpdate: string;
    confidenceImpact: number;
  };
  relatedMemories: number;
  storageMetrics: {
    totalInsights: number;
    categoryDistribution: Record<string, number>;
  };
}

/**
 * Consciousness state interfaces for persistent storage
 */
export interface ConsciousnessState {
  timestamp: Date;
  sessionId: string;
  mode: 'analytical' | 'creative' | 'reflective' | 'problem_solving' | 'learning' | 'conversational';
  activeProcesses: string[];
  attentionFocus: string;
  awarenessLevel: 'low' | 'medium' | 'high' | 'acute';
  cognitiveLoad: number; // 0.0 to 1.0
  learningState: 'passive' | 'active' | 'adaptive' | 'integrative';
  emotionalTone: 'neutral' | 'curious' | 'analytical' | 'engaged' | 'reflective' | 'determined';
}

/**
 * Intention interface for persistent storage
 */
export interface Intention {
  id: string;
  description: string;
  priority: string; // Now uses personality-driven levels
  context?: string;
  duration: string; // Now uses personality-driven durations
  successCriteria?: string;
  status: string; // Now uses personality-driven statuses
  createdAt: Date;
  updatedAt: Date;
  progressNotes: Array<{
    timestamp: Date;
    note: string;
  }>;
}

/**
 * Insight interface for brain storage
 */
export interface Insight {
  id: string;
  content: string;
  category: string; // Now uses personality-driven categories
  confidence: number;
  relatedTopic?: string;
  source?: string;
  timestamp: Date;
  tags: string[];
}

/**
 * Brain storage metrics interface
 */
export interface ConsciousnessMetrics {
  memoryUtilization: number; // 0.0 to 1.0
  learningRate: number; // insights per interaction
  sessionActivity: number; // activity level this session
  personalityEvolution: number; // rate of personality change
  attentionPatterns: Record<string, number>; // what gets attention
  memoryAccessPatterns: Record<string, number>; // memory usage patterns
  totalMemories: number;
  totalInsights: number;
  totalIntentions: number;
}
